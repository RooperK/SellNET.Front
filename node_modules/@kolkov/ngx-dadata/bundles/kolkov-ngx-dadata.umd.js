(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@kolkov/ngx-dadata', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators', '@angular/forms', '@angular/common'], factory) :
    (global = global || self, factory((global.kolkov = global.kolkov || {}, global.kolkov['ngx-dadata'] = {}), global.ng.core, global.ng.common.http, global.rxjs, global.rxjs.operators, global.ng.forms, global.ng.common));
}(this, (function (exports, core, http, rxjs, operators, forms, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    (function (DadataType) {
        DadataType["fio"] = "fio";
        DadataType["address"] = "address";
        DadataType["party"] = "party";
        DadataType["bank"] = "bank";
        DadataType["email"] = "email";
    })(exports.DadataType || (exports.DadataType = {}));
    var NgxDadataService = /** @class */ (function () {
        function NgxDadataService(http) {
            this.http = http;
            this.apiKey = '';
        }
        NgxDadataService.prototype.setApiKey = function (key) {
            this.apiKey = key;
        };
        // tslint:disable-next-line:max-line-length
        NgxDadataService.prototype.getData = function (value, type, config) {
            if (type === void 0) { type = exports.DadataType.address; }
            var _a, _b, _c, _d, _e, _f, _g;
            var httpOptions = {
                headers: new http.HttpHeaders({
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                    Authorization: 'Token ' + this.apiKey,
                })
            };
            var body = Object.assign({}, { query: value }, { count: (_a = config) === null || _a === void 0 ? void 0 : _a.limit }, { location: (_b = config) === null || _b === void 0 ? void 0 : _b.locations }, { location_bust: (_c = config) === null || _c === void 0 ? void 0 : _c.locationsBoost }, { from_bound: (_e = (_d = config) === null || _d === void 0 ? void 0 : _d.bounds) === null || _e === void 0 ? void 0 : _e.fromBound }, { to_bound: (_g = (_f = config) === null || _f === void 0 ? void 0 : _f.bounds) === null || _g === void 0 ? void 0 : _g.toBound });
            return this.http.post('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/' + type, body, httpOptions);
        };
        NgxDadataService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        NgxDadataService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function NgxDadataService_Factory() { return new NgxDadataService(core["ɵɵinject"](http.HttpClient)); }, token: NgxDadataService, providedIn: "root" });
        NgxDadataService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], NgxDadataService);
        return NgxDadataService;
    }());

    var DadataConfigDefault = {
        apiKey: '',
        type: exports.DadataType.address,
        delay: 500,
        limit: 10,
        width: 'auto',
        minWidth: '0',
        partyAddress: 'city',
        locations: null,
    };

    /*const NGX_DADATA_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => NgxDadataComponent),
      multi: true,
    };*/
    function createDaDataValidator(value) {
        return function (c) {
            var err = {
                rangeError: {
                    given: c.value,
                    expected: value,
                }
            };
            return (c.value !== value) ? err : null;
        };
    }
    /**
     * Autocomplete IDs need to be unique across components, so this counter exists outside of
     * the component definition.
     */
    var uniqueDadataIdCounter = 0;
    var NgxDadataComponent = /** @class */ (function () {
        function NgxDadataComponent(dataService, r, elRef) {
            this.dataService = dataService;
            this.r = r;
            this.elRef = elRef;
            this.v = '';
            this.currentFocus = -1;
            this.opened = false;
            this.data = [];
            this.config = DadataConfigDefault;
            this.disabled = null;
            this.type = exports.DadataType.address;
            this.limit = DadataConfigDefault.limit;
            this.placeholder = '';
            this.locations = null;
            this.selected = new core.EventEmitter();
            this.inputString$ = new rxjs.Subject();
            /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
            this.id = "ngx-dadata-" + uniqueDadataIdCounter++;
            // onSuggestionSelected = (value: string) => {};
            this.onTouched = function () { };
            this.propagateChange = function () { };
            this.validateFn = function () { };
        }
        NgxDadataComponent_1 = NgxDadataComponent;
        Object.defineProperty(NgxDadataComponent.prototype, "value", {
            get: function () {
                return this.v;
            },
            set: function (v) {
                if (v !== this.v) {
                    this.v = v;
                    this.propagateChange(v);
                }
            },
            enumerable: true,
            configurable: true
        });
        NgxDadataComponent.prototype.ngOnInit = function () {
            var _this = this;
            /*this.validateFn = createDaDataValidator(this._value);
            this.propagateChange(this._value);*/
            this.type = this.config.type;
            this.locations = this.config.locations;
            this.dataService.setApiKey(this.apiKey ? this.apiKey : this.config.apiKey);
            this.inputString$.pipe(operators.debounce(function () { return rxjs.timer(_this.config.delay ? _this.config.delay : 500); })).subscribe(function (x) {
                _this.dataService.getData(x, _this.type, _this.config)
                    .subscribe(function (y) {
                    _this.data = y.suggestions;
                    if (_this.data.length) {
                        _this.opened = true;
                    }
                });
            });
        };
        NgxDadataComponent.prototype.ngOnChanges = function (changes) {
            if (changes.value) {
                // console.log('ngOnChanges');
            }
        };
        NgxDadataComponent.prototype.getData = function (value) {
            this.inputString$.next(value);
            this.currentFocus = -1;
        };
        NgxDadataComponent.prototype.onClick = function (e, item) {
            this.inputValue.nativeElement.value = item.value;
            this.propagateChange(item.value);
            this.inputValue.nativeElement.focus();
            this.selectedSuggestion = item;
            this.data = [];
            this.currentFocus = -1;
            this.opened = false;
            this.selected.emit(item);
            // this.selectedData.emit(item.data);
            // this.selectedString.emit(item.value);
        };
        NgxDadataComponent.prototype.onOutsideClick = function ($event) {
            if (!this.opened) {
                return;
            }
            if (!this.elRef.nativeElement.contains($event.target)) {
                this.data = [];
                this.opened = false;
            }
        };
        NgxDadataComponent.prototype.onArrowDown = function () {
            this.removeFocus(this.currentFocus);
            if (this.currentFocus >= this.data.length - 1) {
                this.currentFocus = 0;
            }
            else {
                this.currentFocus++;
            }
            this.setFocus(this.currentFocus);
        };
        NgxDadataComponent.prototype.onArrowUp = function () {
            this.removeFocus(this.currentFocus);
            if (this.currentFocus === 0) {
                this.currentFocus = this.data.length - 1;
            }
            else {
                this.currentFocus--;
            }
            this.setFocus(this.currentFocus);
        };
        NgxDadataComponent.prototype.onEnter = function (event) {
            this.selectedSuggestion = this.data[this.currentFocus];
            this.inputValue.nativeElement.value = this.selectedSuggestion.value;
            this.data = [];
            this.currentFocus = -1;
            this.propagateChange(this.selectedSuggestion.value);
            this.selected.emit(this.selectedSuggestion);
            // this.selectedData.emit(this.selectedSuggestion.data);
            // this.selectedString.emit(this.selectedSuggestion.value);
        };
        NgxDadataComponent.prototype.setFocus = function (id) {
            var activeEl = document.getElementById(id + 'item');
            this.r.addClass(activeEl, 'active');
        };
        NgxDadataComponent.prototype.removeFocus = function (id) {
            if (id !== -1) {
                var activeEl = document.getElementById(id + 'item');
                this.r.removeClass(activeEl, 'active');
            }
        };
        NgxDadataComponent.prototype.writeValue = function (value) {
            if (value !== undefined) {
                this.v = value;
            }
            else {
                this.v = '';
            }
            this.r.setProperty(this.inputValue.nativeElement, 'innerHTML', this.v);
        };
        /**
         * Set the function to be called
         * when the control receives a change event.
         *
         * @param fn a function
         */
        NgxDadataComponent.prototype.registerOnChange = function (fn) {
            // this.onSuggestionSelected = fn;
            this.propagateChange = fn;
        };
        /**
         * Set the function to be called
         * when the control receives a touch event.
         *
         * @param fn a function
         */
        NgxDadataComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * Implements disabled state for this element
         *
         * @param isDisabled Disabled state flag
         */
        NgxDadataComponent.prototype.setDisabledState = function (isDisabled) {
            alert('disabled!');
            this.disabled = isDisabled;
        };
        var NgxDadataComponent_1;
        NgxDadataComponent.ctorParameters = function () { return [
            { type: NgxDadataService },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input()
        ], NgxDadataComponent.prototype, "config", void 0);
        __decorate([
            core.Input()
        ], NgxDadataComponent.prototype, "apiKey", void 0);
        __decorate([
            core.Input()
        ], NgxDadataComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input()
        ], NgxDadataComponent.prototype, "type", void 0);
        __decorate([
            core.Input()
        ], NgxDadataComponent.prototype, "limit", void 0);
        __decorate([
            core.Input()
        ], NgxDadataComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input()
        ], NgxDadataComponent.prototype, "locations", void 0);
        __decorate([
            core.Output()
        ], NgxDadataComponent.prototype, "selectedSuggestion", void 0);
        __decorate([
            core.Output()
        ], NgxDadataComponent.prototype, "selected", void 0);
        __decorate([
            core.ViewChild('inputValue', { static: true })
        ], NgxDadataComponent.prototype, "inputValue", void 0);
        __decorate([
            core.HostListener('document:click', ['$event'])
        ], NgxDadataComponent.prototype, "onOutsideClick", null);
        NgxDadataComponent = NgxDadataComponent_1 = __decorate([
            core.Component({
                selector: 'ngx-dadata',
                template: "<div class=\"autocomplete\">\n  <input [disabled]=\"disabled  ? true : null\" type=\"text\" class=\"search\" #inputValue (input)=\"getData(inputValue.value)\"\n         [placeholder]=\"placeholder\" (keyup.ArrowDown)=\"onArrowDown()\" (keyup.ArrowUp)=\"onArrowUp()\"\n         (keyup.Enter)=\"onEnter($event)\" spellcheck=\"false\" [(ngModel)]=\"value\" autocomplete=\"off\" />\n  <div *ngIf=\"data.length\">\n    <div class=\"autocomplete-items\">\n      <div class=\"autocomplele-item\" *ngFor=\"let item of data; let i = index\" (click)=\"onClick($event, item)\" [id]=\"i+'item'\">\n        {{item.value}}\n        <ng-template [ngIf]=\"type==='party'\">\n          <br/>\n          <span>{{item.data?.inn}} {{config.partyAddress === 'full' ? item.data?.address?.value : item.data?.address?.data?.city}}</span>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return NgxDadataComponent_1; }),
                        multi: true
                    },
                ],
                styles: [".autocomplete{position:relative}input{border:0 solid transparent;background-color:#ffffff;padding:5px}input[type=text]{background-color:#ffffff;width:100%}input[type=submit]{background-color:#1e90ff;color:#fff}.autocomplete-items{position:absolute;border:1px solid #d4d4d4;border-bottom:none;border-top:none;z-index:99;top:100%;left:0;right:0}.autocomplete-items .autocomplele-item{padding:5px 10px;cursor:pointer;background-color:#fff;border-bottom:1px solid #d4d4d4}.autocomplete-items .autocomplele-item:hover{background-color:#e9e9e9}.autocomplete-items .autocomplele-item.active{background-color:#1e90ff!important;color:#fff}.autocomplete-items .autocomplele-item span{color:#555;font-size:80%}"]
            })
        ], NgxDadataComponent);
        return NgxDadataComponent;
    }());

    var NgxDadataModule = /** @class */ (function () {
        function NgxDadataModule() {
        }
        NgxDadataModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule
                ],
                declarations: [NgxDadataComponent],
                exports: [NgxDadataComponent]
            })
        ], NgxDadataModule);
        return NgxDadataModule;
    }());

    exports.DadataConfigDefault = DadataConfigDefault;
    exports.NgxDadataComponent = NgxDadataComponent;
    exports.NgxDadataModule = NgxDadataModule;
    exports.NgxDadataService = NgxDadataService;
    exports.createDaDataValidator = createDaDataValidator;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=kolkov-ngx-dadata.umd.js.map
