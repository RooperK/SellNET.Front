import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export var DadataType;
(function (DadataType) {
    DadataType["fio"] = "fio";
    DadataType["address"] = "address";
    DadataType["party"] = "party";
    DadataType["bank"] = "bank";
    DadataType["email"] = "email";
})(DadataType || (DadataType = {}));
var NgxDadataService = /** @class */ (function () {
    function NgxDadataService(http) {
        this.http = http;
        this.apiKey = '';
    }
    NgxDadataService.prototype.setApiKey = function (key) {
        this.apiKey = key;
    };
    // tslint:disable-next-line:max-line-length
    NgxDadataService.prototype.getData = function (value, type, config) {
        if (type === void 0) { type = DadataType.address; }
        var _a, _b, _c, _d, _e, _f, _g;
        var httpOptions = {
            headers: new HttpHeaders({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Token ' + this.apiKey,
            })
        };
        var body = Object.assign({}, { query: value }, { count: (_a = config) === null || _a === void 0 ? void 0 : _a.limit }, { location: (_b = config) === null || _b === void 0 ? void 0 : _b.locations }, { location_bust: (_c = config) === null || _c === void 0 ? void 0 : _c.locationsBoost }, { from_bound: (_e = (_d = config) === null || _d === void 0 ? void 0 : _d.bounds) === null || _e === void 0 ? void 0 : _e.fromBound }, { to_bound: (_g = (_f = config) === null || _f === void 0 ? void 0 : _f.bounds) === null || _g === void 0 ? void 0 : _g.toBound });
        return this.http.post('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/' + type, body, httpOptions);
    };
    NgxDadataService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    NgxDadataService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxDadataService_Factory() { return new NgxDadataService(i0.ɵɵinject(i1.HttpClient)); }, token: NgxDadataService, providedIn: "root" });
    NgxDadataService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], NgxDadataService);
    return NgxDadataService;
}());
export { NgxDadataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGtvbGtvdi9uZ3gtZGFkYXRhLyIsInNvdXJjZXMiOlsibGliL25neC1kYWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFFLFdBQVcsRUFBQyxNQUFNLHNCQUFzQixDQUFDOzs7QUFLN0QsTUFBTSxDQUFOLElBQVksVUFNWDtBQU5ELFdBQVksVUFBVTtJQUNwQix5QkFBVyxDQUFBO0lBQ1gsaUNBQW1CLENBQUE7SUFDbkIsNkJBQWUsQ0FBQTtJQUNmLDJCQUFhLENBQUE7SUFDYiw2QkFBZSxDQUFBO0FBQ2pCLENBQUMsRUFOVyxVQUFVLEtBQVYsVUFBVSxRQU1yQjtBQUtEO0lBR0UsMEJBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFGcEMsV0FBTSxHQUFHLEVBQUUsQ0FBQztJQUdaLENBQUM7SUFFRCxvQ0FBUyxHQUFULFVBQVUsR0FBVztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQsMkNBQTJDO0lBQzNDLGtDQUFPLEdBQVAsVUFBUSxLQUFhLEVBQUUsSUFBcUMsRUFBRSxNQUFvQjtRQUEzRCxxQkFBQSxFQUFBLE9BQW1CLFVBQVUsQ0FBQyxPQUFPOztRQUMxRCxJQUFNLFdBQVcsR0FBRztZQUNsQixPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3ZCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLGNBQWMsRUFBRSxrQkFBa0I7Z0JBQ2xDLGFBQWEsRUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU07YUFDdEMsQ0FBQztTQUNILENBQUM7UUFDRixJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUN4QixFQUFFLEVBQ0YsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLEVBQ2QsRUFBQyxLQUFLLFFBQUUsTUFBTSwwQ0FBRSxLQUFLLEVBQUMsRUFDdEIsRUFBQyxRQUFRLFFBQUUsTUFBTSwwQ0FBRSxTQUFTLEVBQUMsRUFDN0IsRUFBQyxhQUFhLFFBQUUsTUFBTSwwQ0FBRSxjQUFjLEVBQUMsRUFDdkMsRUFBQyxVQUFVLGNBQUUsTUFBTSwwQ0FBRSxNQUFNLDBDQUFFLFNBQVMsRUFBQyxFQUN2QyxFQUFDLFFBQVEsY0FBRSxNQUFNLDBDQUFFLE1BQU0sMENBQUUsT0FBTyxFQUFDLENBQ3BDLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFpQiwrREFBK0QsR0FBRyxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ25JLENBQUM7O2dCQTFCeUIsVUFBVTs7O0lBSHpCLGdCQUFnQjtRQUg1QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csZ0JBQWdCLENBOEI1QjsyQkEvQ0Q7Q0ErQ0MsQUE5QkQsSUE4QkM7U0E5QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudCwgSHR0cEhlYWRlcnN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0RhZGF0YVJlc3BvbnNlfSBmcm9tICcuL21vZGVscy9kYWRhdGEtcmVzcG9uc2UnO1xuaW1wb3J0IHtCb3VuZHMsIERhZGF0YUNvbmZpZywgTG9jYXRpb259IGZyb20gJy4vZGFkYXRhLWNvbmZpZyc7XG5cbmV4cG9ydCBlbnVtIERhZGF0YVR5cGUge1xuICBmaW8gPSAnZmlvJyxcbiAgYWRkcmVzcyA9ICdhZGRyZXNzJyxcbiAgcGFydHkgPSAncGFydHknLFxuICBiYW5rID0gJ2JhbmsnLFxuICBlbWFpbCA9ICdlbWFpbCdcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RGFkYXRhU2VydmljZSB7XG4gIGFwaUtleSA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICB9XG5cbiAgc2V0QXBpS2V5KGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5hcGlLZXkgPSBrZXk7XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gIGdldERhdGEodmFsdWU6IHN0cmluZywgdHlwZTogRGFkYXRhVHlwZSA9IERhZGF0YVR5cGUuYWRkcmVzcywgY29uZmlnOiBEYWRhdGFDb25maWcpOiBPYnNlcnZhYmxlPERhZGF0YVJlc3BvbnNlPiB7XG4gICAgY29uc3QgaHR0cE9wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgQXV0aG9yaXphdGlvbjogJ1Rva2VuICcgKyB0aGlzLmFwaUtleSxcbiAgICAgIH0pXG4gICAgfTtcbiAgICBjb25zdCBib2R5ID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAge3F1ZXJ5OiB2YWx1ZX0sXG4gICAgICB7Y291bnQ6IGNvbmZpZz8ubGltaXR9LFxuICAgICAge2xvY2F0aW9uOiBjb25maWc/LmxvY2F0aW9uc30sXG4gICAgICB7bG9jYXRpb25fYnVzdDogY29uZmlnPy5sb2NhdGlvbnNCb29zdH0sXG4gICAgICB7ZnJvbV9ib3VuZDogY29uZmlnPy5ib3VuZHM/LmZyb21Cb3VuZH0sXG4gICAgICB7dG9fYm91bmQ6IGNvbmZpZz8uYm91bmRzPy50b0JvdW5kfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PERhZGF0YVJlc3BvbnNlPignaHR0cHM6Ly9zdWdnZXN0aW9ucy5kYWRhdGEucnUvc3VnZ2VzdGlvbnMvYXBpLzRfMS9ycy9zdWdnZXN0LycgKyB0eXBlLCBib2R5LCBodHRwT3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==