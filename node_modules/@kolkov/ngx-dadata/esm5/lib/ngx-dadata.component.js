import { __decorate } from "tslib";
import { Component, ElementRef, EventEmitter, forwardRef, HostListener, Input, OnChanges, OnInit, Output, Renderer2, SimpleChanges, ViewChild } from '@angular/core';
import { DadataType, NgxDadataService } from './ngx-dadata.service';
import { Subject, timer } from 'rxjs';
import { debounce } from 'rxjs/operators';
import { DadataConfigDefault } from './dadata-config';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/*const NGX_DADATA_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => NgxDadataComponent),
  multi: true,
};*/
export function createDaDataValidator(value) {
    return function (c) {
        var err = {
            rangeError: {
                given: c.value,
                expected: value,
            }
        };
        return (c.value !== value) ? err : null;
    };
}
/**
 * Autocomplete IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
var uniqueDadataIdCounter = 0;
var NgxDadataComponent = /** @class */ (function () {
    function NgxDadataComponent(dataService, r, elRef) {
        this.dataService = dataService;
        this.r = r;
        this.elRef = elRef;
        this.v = '';
        this.currentFocus = -1;
        this.opened = false;
        this.data = [];
        this.config = DadataConfigDefault;
        this.disabled = null;
        this.type = DadataType.address;
        this.limit = DadataConfigDefault.limit;
        this.placeholder = '';
        this.locations = null;
        this.selected = new EventEmitter();
        this.inputString$ = new Subject();
        /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
        this.id = "ngx-dadata-" + uniqueDadataIdCounter++;
        // onSuggestionSelected = (value: string) => {};
        this.onTouched = function () { };
        this.propagateChange = function () { };
        this.validateFn = function () { };
    }
    NgxDadataComponent_1 = NgxDadataComponent;
    Object.defineProperty(NgxDadataComponent.prototype, "value", {
        get: function () {
            return this.v;
        },
        set: function (v) {
            if (v !== this.v) {
                this.v = v;
                this.propagateChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgxDadataComponent.prototype.ngOnInit = function () {
        var _this = this;
        /*this.validateFn = createDaDataValidator(this._value);
        this.propagateChange(this._value);*/
        this.type = this.config.type;
        this.locations = this.config.locations;
        this.dataService.setApiKey(this.apiKey ? this.apiKey : this.config.apiKey);
        this.inputString$.pipe(debounce(function () { return timer(_this.config.delay ? _this.config.delay : 500); })).subscribe(function (x) {
            _this.dataService.getData(x, _this.type, _this.config)
                .subscribe(function (y) {
                _this.data = y.suggestions;
                if (_this.data.length) {
                    _this.opened = true;
                }
            });
        });
    };
    NgxDadataComponent.prototype.ngOnChanges = function (changes) {
        if (changes.value) {
            // console.log('ngOnChanges');
        }
    };
    NgxDadataComponent.prototype.getData = function (value) {
        this.inputString$.next(value);
        this.currentFocus = -1;
    };
    NgxDadataComponent.prototype.onClick = function (e, item) {
        this.inputValue.nativeElement.value = item.value;
        this.propagateChange(item.value);
        this.inputValue.nativeElement.focus();
        this.selectedSuggestion = item;
        this.data = [];
        this.currentFocus = -1;
        this.opened = false;
        this.selected.emit(item);
        // this.selectedData.emit(item.data);
        // this.selectedString.emit(item.value);
    };
    NgxDadataComponent.prototype.onOutsideClick = function ($event) {
        if (!this.opened) {
            return;
        }
        if (!this.elRef.nativeElement.contains($event.target)) {
            this.data = [];
            this.opened = false;
        }
    };
    NgxDadataComponent.prototype.onArrowDown = function () {
        this.removeFocus(this.currentFocus);
        if (this.currentFocus >= this.data.length - 1) {
            this.currentFocus = 0;
        }
        else {
            this.currentFocus++;
        }
        this.setFocus(this.currentFocus);
    };
    NgxDadataComponent.prototype.onArrowUp = function () {
        this.removeFocus(this.currentFocus);
        if (this.currentFocus === 0) {
            this.currentFocus = this.data.length - 1;
        }
        else {
            this.currentFocus--;
        }
        this.setFocus(this.currentFocus);
    };
    NgxDadataComponent.prototype.onEnter = function (event) {
        this.selectedSuggestion = this.data[this.currentFocus];
        this.inputValue.nativeElement.value = this.selectedSuggestion.value;
        this.data = [];
        this.currentFocus = -1;
        this.propagateChange(this.selectedSuggestion.value);
        this.selected.emit(this.selectedSuggestion);
        // this.selectedData.emit(this.selectedSuggestion.data);
        // this.selectedString.emit(this.selectedSuggestion.value);
    };
    NgxDadataComponent.prototype.setFocus = function (id) {
        var activeEl = document.getElementById(id + 'item');
        this.r.addClass(activeEl, 'active');
    };
    NgxDadataComponent.prototype.removeFocus = function (id) {
        if (id !== -1) {
            var activeEl = document.getElementById(id + 'item');
            this.r.removeClass(activeEl, 'active');
        }
    };
    NgxDadataComponent.prototype.writeValue = function (value) {
        if (value !== undefined) {
            this.v = value;
        }
        else {
            this.v = '';
        }
        this.r.setProperty(this.inputValue.nativeElement, 'innerHTML', this.v);
    };
    /**
     * Set the function to be called
     * when the control receives a change event.
     *
     * @param fn a function
     */
    NgxDadataComponent.prototype.registerOnChange = function (fn) {
        // this.onSuggestionSelected = fn;
        this.propagateChange = fn;
    };
    /**
     * Set the function to be called
     * when the control receives a touch event.
     *
     * @param fn a function
     */
    NgxDadataComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * Implements disabled state for this element
     *
     * @param isDisabled Disabled state flag
     */
    NgxDadataComponent.prototype.setDisabledState = function (isDisabled) {
        alert('disabled!');
        this.disabled = isDisabled;
    };
    var NgxDadataComponent_1;
    NgxDadataComponent.ctorParameters = function () { return [
        { type: NgxDadataService },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], NgxDadataComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], NgxDadataComponent.prototype, "apiKey", void 0);
    __decorate([
        Input()
    ], NgxDadataComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], NgxDadataComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], NgxDadataComponent.prototype, "limit", void 0);
    __decorate([
        Input()
    ], NgxDadataComponent.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], NgxDadataComponent.prototype, "locations", void 0);
    __decorate([
        Output()
    ], NgxDadataComponent.prototype, "selectedSuggestion", void 0);
    __decorate([
        Output()
    ], NgxDadataComponent.prototype, "selected", void 0);
    __decorate([
        ViewChild('inputValue', { static: true })
    ], NgxDadataComponent.prototype, "inputValue", void 0);
    __decorate([
        HostListener('document:click', ['$event'])
    ], NgxDadataComponent.prototype, "onOutsideClick", null);
    NgxDadataComponent = NgxDadataComponent_1 = __decorate([
        Component({
            selector: 'ngx-dadata',
            template: "<div class=\"autocomplete\">\n  <input [disabled]=\"disabled  ? true : null\" type=\"text\" class=\"search\" style=\"border-radius: 20px !important; background-color: white; border: 0 white !important; margin-top:.5rem!important\" #inputValue (input)=\"getData(inputValue.value)\"\n         [placeholder]=\"placeholder\" (keyup.ArrowDown)=\"onArrowDown()\" (keyup.ArrowUp)=\"onArrowUp()\"\n         (keyup.Enter)=\"onEnter($event)\" spellcheck=\"false\" [(ngModel)]=\"value\" autocomplete=\"off\" />\n  <div *ngIf=\"data.length\">\n    <div class=\"autocomplete-items\">\n      <div class=\"autocomplele-item\" *ngFor=\"let item of data; let i = index\" (click)=\"onClick($event, item)\" [id]=\"i+'item'\">\n        {{item.value}}\n        <ng-template [ngIf]=\"type==='party'\">\n          <br/>\n          <span>{{item.data?.inn}} {{config.partyAddress === 'full' ? item.data?.address?.value : item.data?.address?.data?.city}}</span>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return NgxDadataComponent_1; }),
                    multi: true
                },
            ],
            styles: [".autocomplete{position:relative}input{border:0 solid transparent;background-color:#f1f1f1;padding:5px}input[type=text]{background-color:#f1f1f1;width:100%}input[type=submit]{background-color:#1e90ff;color:#fff}.autocomplete-items{position:absolute;border:1px solid #d4d4d4;border-bottom:none;border-top:none;z-index:99;top:100%;left:0;right:0}.autocomplete-items .autocomplele-item{padding:5px 10px;cursor:pointer;background-color:#fff;border-bottom:1px solid #d4d4d4}.autocomplete-items .autocomplele-item:hover{background-color:#e9e9e9}.autocomplete-items .autocomplele-item.active{background-color:#1e90ff!important;color:#fff}.autocomplete-items .autocomplele-item span{color:#555;font-size:80%}"]
        })
    ], NgxDadataComponent);
    return NgxDadataComponent;
}());
export { NgxDadataComponent };
//# sourceMappingURL=data:application/json;base64,
