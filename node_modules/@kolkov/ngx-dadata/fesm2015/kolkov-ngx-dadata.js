import { __decorate } from 'tslib';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Renderer2, ElementRef, Input, Output, ViewChild, HostListener, Component, forwardRef, NgModule } from '@angular/core';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { Subject, timer } from 'rxjs';
import { debounce } from 'rxjs/operators';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

var DadataType;
(function (DadataType) {
    DadataType["fio"] = "fio";
    DadataType["address"] = "address";
    DadataType["party"] = "party";
    DadataType["bank"] = "bank";
    DadataType["email"] = "email";
})(DadataType || (DadataType = {}));
let NgxDadataService = class NgxDadataService {
    constructor(http) {
        this.http = http;
        this.apiKey = '';
    }
    setApiKey(key) {
        this.apiKey = key;
    }
    // tslint:disable-next-line:max-line-length
    getData(value, type = DadataType.address, config) {
        var _a, _b, _c, _d, _e, _f, _g;
        const httpOptions = {
            headers: new HttpHeaders({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Token ' + this.apiKey,
            })
        };
        const body = Object.assign({}, { query: value }, { count: (_a = config) === null || _a === void 0 ? void 0 : _a.limit }, { location: (_b = config) === null || _b === void 0 ? void 0 : _b.locations }, { location_bust: (_c = config) === null || _c === void 0 ? void 0 : _c.locationsBoost }, { from_bound: (_e = (_d = config) === null || _d === void 0 ? void 0 : _d.bounds) === null || _e === void 0 ? void 0 : _e.fromBound }, { to_bound: (_g = (_f = config) === null || _f === void 0 ? void 0 : _f.bounds) === null || _g === void 0 ? void 0 : _g.toBound });
        return this.http.post('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/' + type, body, httpOptions);
    }
};
NgxDadataService.ctorParameters = () => [
    { type: HttpClient }
];
NgxDadataService.ɵprov = ɵɵdefineInjectable({ factory: function NgxDadataService_Factory() { return new NgxDadataService(ɵɵinject(HttpClient)); }, token: NgxDadataService, providedIn: "root" });
NgxDadataService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], NgxDadataService);

const DadataConfigDefault = {
    apiKey: '',
    type: DadataType.address,
    delay: 500,
    limit: 10,
    width: 'auto',
    minWidth: '0',
    partyAddress: 'city',
    locations: null,
};

var NgxDadataComponent_1;
/*const NGX_DADATA_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => NgxDadataComponent),
  multi: true,
};*/
function createDaDataValidator(value) {
    return (c) => {
        const err = {
            rangeError: {
                given: c.value,
                expected: value,
            }
        };
        return (c.value !== value) ? err : null;
    };
}
/**
 * Autocomplete IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let uniqueDadataIdCounter = 0;
let NgxDadataComponent = NgxDadataComponent_1 = class NgxDadataComponent {
    constructor(dataService, r, elRef) {
        this.dataService = dataService;
        this.r = r;
        this.elRef = elRef;
        this.v = '';
        this.currentFocus = -1;
        this.opened = false;
        this.data = [];
        this.config = DadataConfigDefault;
        this.disabled = null;
        this.type = DadataType.address;
        this.limit = DadataConfigDefault.limit;
        this.placeholder = '';
        this.locations = null;
        this.selected = new EventEmitter();
        this.inputString$ = new Subject();
        /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
        this.id = `ngx-dadata-${uniqueDadataIdCounter++}`;
        // onSuggestionSelected = (value: string) => {};
        this.onTouched = () => { };
        this.propagateChange = () => { };
        this.validateFn = () => { };
    }
    get value() {
        return this.v;
    }
    set value(v) {
        if (v !== this.v) {
            this.v = v;
            this.propagateChange(v);
        }
    }
    ngOnInit() {
        /*this.validateFn = createDaDataValidator(this._value);
        this.propagateChange(this._value);*/
        this.type = this.config.type;
        this.locations = this.config.locations;
        this.dataService.setApiKey(this.apiKey ? this.apiKey : this.config.apiKey);
        this.inputString$.pipe(debounce(() => timer(this.config.delay ? this.config.delay : 500))).subscribe(x => {
            this.dataService.getData(x, this.type, this.config)
                .subscribe((y) => {
                this.data = y.suggestions;
                if (this.data.length) {
                    this.opened = true;
                }
            });
        });
    }
    ngOnChanges(changes) {
        if (changes.value) {
            // console.log('ngOnChanges');
        }
    }
    getData(value) {
        this.inputString$.next(value);
        this.currentFocus = -1;
    }
    onClick(e, item) {
        this.inputValue.nativeElement.value = item.value;
        this.propagateChange(item.value);
        this.inputValue.nativeElement.focus();
        this.selectedSuggestion = item;
        this.data = [];
        this.currentFocus = -1;
        this.opened = false;
        this.selected.emit(item);
        // this.selectedData.emit(item.data);
        // this.selectedString.emit(item.value);
    }
    onOutsideClick($event) {
        if (!this.opened) {
            return;
        }
        if (!this.elRef.nativeElement.contains($event.target)) {
            this.data = [];
            this.opened = false;
        }
    }
    onArrowDown() {
        this.removeFocus(this.currentFocus);
        if (this.currentFocus >= this.data.length - 1) {
            this.currentFocus = 0;
        }
        else {
            this.currentFocus++;
        }
        this.setFocus(this.currentFocus);
    }
    onArrowUp() {
        this.removeFocus(this.currentFocus);
        if (this.currentFocus === 0) {
            this.currentFocus = this.data.length - 1;
        }
        else {
            this.currentFocus--;
        }
        this.setFocus(this.currentFocus);
    }
    onEnter(event) {
        this.selectedSuggestion = this.data[this.currentFocus];
        this.inputValue.nativeElement.value = this.selectedSuggestion.value;
        this.data = [];
        this.currentFocus = -1;
        this.propagateChange(this.selectedSuggestion.value);
        this.selected.emit(this.selectedSuggestion);
        // this.selectedData.emit(this.selectedSuggestion.data);
        // this.selectedString.emit(this.selectedSuggestion.value);
    }
    setFocus(id) {
        const activeEl = document.getElementById(id + 'item');
        this.r.addClass(activeEl, 'active');
    }
    removeFocus(id) {
        if (id !== -1) {
            const activeEl = document.getElementById(id + 'item');
            this.r.removeClass(activeEl, 'active');
        }
    }
    writeValue(value) {
        if (value !== undefined) {
            this.v = value;
        }
        else {
            this.v = '';
        }
        this.r.setProperty(this.inputValue.nativeElement, 'innerHTML', this.v);
    }
    /**
     * Set the function to be called
     * when the control receives a change event.
     *
     * @param fn a function
     */
    registerOnChange(fn) {
        // this.onSuggestionSelected = fn;
        this.propagateChange = fn;
    }
    /**
     * Set the function to be called
     * when the control receives a touch event.
     *
     * @param fn a function
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Implements disabled state for this element
     *
     * @param isDisabled Disabled state flag
     */
    setDisabledState(isDisabled) {
        alert('disabled!');
        this.disabled = isDisabled;
    }
};
NgxDadataComponent.ctorParameters = () => [
    { type: NgxDadataService },
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input()
], NgxDadataComponent.prototype, "config", void 0);
__decorate([
    Input()
], NgxDadataComponent.prototype, "apiKey", void 0);
__decorate([
    Input()
], NgxDadataComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], NgxDadataComponent.prototype, "type", void 0);
__decorate([
    Input()
], NgxDadataComponent.prototype, "limit", void 0);
__decorate([
    Input()
], NgxDadataComponent.prototype, "placeholder", void 0);
__decorate([
    Input()
], NgxDadataComponent.prototype, "locations", void 0);
__decorate([
    Output()
], NgxDadataComponent.prototype, "selectedSuggestion", void 0);
__decorate([
    Output()
], NgxDadataComponent.prototype, "selected", void 0);
__decorate([
    ViewChild('inputValue', { static: true })
], NgxDadataComponent.prototype, "inputValue", void 0);
__decorate([
    HostListener('document:click', ['$event'])
], NgxDadataComponent.prototype, "onOutsideClick", null);
NgxDadataComponent = NgxDadataComponent_1 = __decorate([
    Component({
        selector: 'ngx-dadata',
        template: "<div class=\"autocomplete\">\n  <input [disabled]=\"disabled  ? true : null\" type=\"text\" class=\"search\" #inputValue (input)=\"getData(inputValue.value)\"\n         [placeholder]=\"placeholder\" (keyup.ArrowDown)=\"onArrowDown()\" (keyup.ArrowUp)=\"onArrowUp()\"\n         (keyup.Enter)=\"onEnter($event)\" spellcheck=\"false\" [(ngModel)]=\"value\" autocomplete=\"off\" />\n  <div *ngIf=\"data.length\">\n    <div class=\"autocomplete-items\">\n      <div class=\"autocomplele-item\" *ngFor=\"let item of data; let i = index\" (click)=\"onClick($event, item)\" [id]=\"i+'item'\">\n        {{item.value}}\n        <ng-template [ngIf]=\"type==='party'\">\n          <br/>\n          <span>{{item.data?.inn}} {{config.partyAddress === 'full' ? item.data?.address?.value : item.data?.address?.data?.city}}</span>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => NgxDadataComponent_1),
                multi: true
            },
        ],
        styles: [".autocomplete{position:relative}input{border:0 solid transparent;background-color:#ffffff;padding:6px 12px; margin:.5rem 0; box-shadow: 0 .125rem .25rem rgba(0,0,0,.075)!important; border-radius: 20px !important; border: 0 white !important; margin-top:.5rem!important}input:focus{outline-width: 0;}input[type=text]{background-color:#ffffff;width:100%}input[type=submit]{background-color:#1e90ff;color:#fff}.autocomplete-items{position:absolute;border:1px solid #d4d4d4;border-bottom:none;border-top:none;z-index:99;top:100%;left:0;right:0}.autocomplete-items .autocomplele-item{padding:5px 10px;cursor:pointer;background-color:#fff;border-bottom:1px solid #d4d4d4 border-radius: 20px !important;}.autocomplete-items .autocomplele-item:hover{background-color:#e9e9e9}.autocomplete-items .autocomplele-item.active{background-color:#1e90ff!important;color:#fff}.autocomplete-items .autocomplele-item span{color:#555;font-size:80%}"]
    })
], NgxDadataComponent);

let NgxDadataModule = class NgxDadataModule {
};
NgxDadataModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule
        ],
        declarations: [NgxDadataComponent],
        exports: [NgxDadataComponent]
    })
], NgxDadataModule);

/*
 * Public API Surface of ngx-dadata
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DadataConfigDefault, DadataType, NgxDadataComponent, NgxDadataModule, NgxDadataService, createDaDataValidator };
//# sourceMappingURL=kolkov-ngx-dadata.js.map
